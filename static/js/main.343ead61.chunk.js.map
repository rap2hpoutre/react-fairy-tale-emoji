{"version":3,"sources":["helpers/english.js","tale.js","App.js","serviceWorker.js","index.js"],"names":["wordHerHis","g","tale","heroes","shuffle","name","gender","img","foods","animals","text","_s","choices","map","hero","concat","state","s","story","Object","toConsumableArray","food","animal","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","_e","c","setState","objectSpread","items","current","react_default","a","createElement","_this2","length","className","button","item","onClick","e","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.343ead61.chunk.js","sourcesContent":["export const wordHerHim = (g) => g === 'f' ? 'her' : 'him'\n\nexport const wordHerHis = (g) => g === 'f' ? 'her' : 'his'\n","import shuffle from 'n-shuffle';\nimport { wordHerHis } from './helpers/english';\n\nexport default () => {\n  const heroes = shuffle([\n    { name: 'ghost', gender: 'm', img: '👻' },\n    { name: 'clown', gender: 'm', img: '🤡' },\n    { name: 'robot', gender: 'm', img: '🤖' },\n    { name: 'martian', gender: 'm', img: '👽' },\n    { name: 'farmer', gender: 'f', img: '👩‍🌾' },\n    { name: 'princess', gender: 'f', img: '👸' }\n  ]);\n\n  const foods = shuffle([\n    { name: 'poultry leg', img: '🍗' },\n    { name: 'broccoli', img: '🥦' },\n    { name: 'pretzel', img: '🥨' },\n    { name: 'taco', img: '🌮' },\n    { name: 'hamburger', img: '🍔' },\n    { name: 'bento box', img: '🍱' },\n    { name: 'baby bottle', img: '🍼' },\n  ]);\n\n  const animals = shuffle([\n    { name: 'gorilla', img: '🦍' },\n    { name: 'wolf', img: '🐺' },\n    { name: 'dragon', img: '🐉' },\n    { name: 'snail', img: '🐌' },\n    { name: 'T-Rex', img: '🦖' },\n    { name: 'rooster', img: '🐓' },\n  ]);\n\n  return [\n    {\n      text: _s => 'One upon a time, there was...',\n      choices: _s =>\n        [heroes[0], heroes[1]].map(hero => ({\n          text: _s => `A ${hero.name}`,\n          img: _s => hero.img,\n          state: s => ({\n            hero,\n            story: [...s.story, `Once upon a time, there was a ${hero.name}.`]\n          })\n        }))\n    },\n    {\n      text: s =>\n        `The ${s.hero.name} lived with ${wordHerHis(s.hero.gender)} mother.`\n    },\n    {\n      text: s =>\n        `One day, ${wordHerHis(s.hero.gender)} mother says: \"Take this...\"`,\n        choices: _s =>\n        [foods[0], foods[1]].map(food => ({\n          text: _s => food.name,\n          img: _s => food.img,\n          state: s => ({\n            food,\n            story: [...s.story, `One day, ${wordHerHis(s.hero.gender)} mother says: \"Take this ${food.name} to your grandmother. She is ill and weak.\"`]\n          })\n        }))\n    },\n    {\n      text: s => `The ${s.hero.name} set out immediately to go to her grandmother, who lived in another village.`\n    },\n    {\n      text: s => `As she was going through the wood, she met with the...`,\n      choices: _s =>\n        [animals[0], animals[1]].map(animal => ({\n          text: _s => animal.name,\n          img: _s => animal.img,\n          state: s => ({\n            animal,\n            story: [...s.story, `As she was going through the wood, she met with the ${animal.name}!`]\n          })\n        }))\n    },\n    {\n      text: s => `The ${s.animal.name} says`\n    },\n  ];\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport tale from './tale';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.items = tale();\n    this.state = {\n      current: 0,\n      story: []\n    };\n  }\n\n  handleClick = (_e, c) => {\n    if (c) {\n      this.setState({ ...c.state(this.state) });\n    } else {\n      const story = [...this.state.story, this.items[this.state.current].text(this.state)];\n      this.setState({ story  });\n    }\n    this.setState({ current: this.state.current + 1 });\n  };\n\n  story = () => this.state.story.map(s => <p><i>{s}</i></p>);\n\n  current() {\n    if (this.state.current === this.items.length) {\n      return <p className=\"App-intro\">The end.</p>;\n    }\n    const item = this.items[this.state.current];\n    const text = item.text(this.state);\n    let button;\n    if (item.choices) {\n      button = item.choices(this.state).map(c => (\n        <button onClick={e => this.handleClick(e, c)} key={c.text(this.state)}>\n          {c.text(this.state)}\n          {c.img ? <span>{c.img()}</span> : <span />}\n        </button>\n      ));\n    } else {\n      button = <button onClick={this.handleClick}>Next</button>;\n    }\n    return (\n      <div>\n        <p className=\"App-intro\">{text}</p>\n        {button}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Fairy tale</h1>\n        </header>\n        {this.story()}\n        {this.current()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}